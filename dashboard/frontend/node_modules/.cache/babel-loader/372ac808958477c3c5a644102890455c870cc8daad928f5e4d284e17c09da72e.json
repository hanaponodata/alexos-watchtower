{"ast":null,"code":"import React,{createContext,useContext,useEffect,useRef,useState,useCallback}from'react';import toast from'react-hot-toast';import{jsx as _jsx}from\"react/jsx-runtime\";const WebSocketContext=/*#__PURE__*/createContext();export function WebSocketProvider(_ref){let{children}=_ref;const[isConnected,setIsConnected]=useState(false);const[isConnecting,setIsConnecting]=useState(false);const[connectionAttempts,setConnectionAttempts]=useState(0);const[metrics,setMetrics]=useState(null);const[events,setEvents]=useState([]);const[agents,setAgents]=useState([]);const[connectionError,setConnectionError]=useState(null);const[authToken,setAuthToken]=useState(null);const wsRef=useRef(null);const reconnectTimeoutRef=useRef(null);const heartbeatIntervalRef=useRef(null);const maxReconnectAttempts=5;const reconnectDelay=3000;const isInitializedRef=useRef(false);// Get auth token from localStorage\nuseEffect(()=>{const token=localStorage.getItem('watchtower_auth_token');if(token){setAuthToken(token);}},[]);const connect=useCallback(()=>{if(isConnecting||isConnected)return;if(connectionAttempts>=maxReconnectAttempts){console.log('Max reconnection attempts reached, stopping WebSocket connection');setConnectionError('Maximum reconnection attempts reached. Real-time updates are disabled.');toast.error('Real-time connection unavailable - using polling mode');return;}setIsConnecting(true);setConnectionError(null);try{// Build WebSocket URL with authentication token\nlet wsUrl='ws://10.42.69.208:5000/ws';if(authToken){wsUrl+=\"?token=\".concat(encodeURIComponent(authToken));}console.log('Attempting WebSocket connection to:',wsUrl);wsRef.current=new WebSocket(wsUrl);const connectionTimeout=setTimeout(()=>{if(wsRef.current&&wsRef.current.readyState===WebSocket.CONNECTING){console.log('WebSocket connection timeout');wsRef.current.close();setConnectionError('Connection timeout. Real-time updates are disabled.');}},10000);wsRef.current.onopen=()=>{clearTimeout(connectionTimeout);setIsConnected(true);setIsConnecting(false);setConnectionAttempts(0);setConnectionError(null);console.log('WebSocket connected successfully');// Subscribe to channels\nwsRef.current.send(JSON.stringify({action:'subscribe',channels:['metrics','events','agents','alerts','system']}));// Set up heartbeat\nif(heartbeatIntervalRef.current){clearInterval(heartbeatIntervalRef.current);}heartbeatIntervalRef.current=setInterval(()=>{if(wsRef.current&&wsRef.current.readyState===WebSocket.OPEN){wsRef.current.send(JSON.stringify({action:'ping'}));}},30000);toast.success('Real-time connection established');};wsRef.current.onmessage=event=>{try{const data=JSON.parse(event.data);console.log('WebSocket message received:',data);switch(data.type){case'metrics_update':setMetrics(data.data);break;case'new_event':setEvents(prev=>[data.data,...prev.slice(0,99)]);if(data.data.severity==='critical'||data.data.severity==='error'){toast.error(\"Critical Event: \".concat(data.data.message),{duration:6000});}else if(data.data.severity==='warning'){toast.warning(\"Warning: \".concat(data.data.message),{duration:4000});}else{toast.success(\"Event: \".concat(data.data.message),{duration:3000});}break;case'alert':toast.error(\"Alert: \".concat(data.data.message),{duration:6000});break;case'events':setEvents(data.data);break;case'agents':setAgents(data.data);break;case'subscription_confirmed':console.log('Subscribed to channels:',data.channels);break;case'pong':console.log('Received pong from server');break;case'ping':// Respond to server ping\nif(wsRef.current&&wsRef.current.readyState===WebSocket.OPEN){wsRef.current.send(JSON.stringify({action:'pong'}));}break;case'error':console.error('WebSocket error from server:',data.message);toast.error(\"Server Error: \".concat(data.message),{duration:4000});break;default:console.log('Unknown message type:',data.type);}}catch(error){console.error('Error parsing WebSocket message:',error);}};wsRef.current.onclose=event=>{clearTimeout(connectionTimeout);setIsConnected(false);setIsConnecting(false);if(heartbeatIntervalRef.current){clearInterval(heartbeatIntervalRef.current);heartbeatIntervalRef.current=null;}console.log('WebSocket disconnected:',event.code,event.reason);// Handle authentication errors\nif(event.code===4001){console.log('Authentication failed, clearing token');localStorage.removeItem('watchtower_auth_token');setAuthToken(null);setConnectionError('Authentication failed. Please log in again.');toast.error('Authentication failed - please log in again');return;}if(event.code!==1000&&connectionAttempts<maxReconnectAttempts){if(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);}const delay=reconnectDelay*Math.pow(2,connectionAttempts);console.log(\"Scheduling reconnection attempt \".concat(connectionAttempts+1,\" in \").concat(delay,\"ms\"));reconnectTimeoutRef.current=setTimeout(()=>{setConnectionAttempts(prev=>prev+1);connect();},delay);}else if(connectionAttempts>=maxReconnectAttempts){console.log('Max reconnection attempts reached, WebSocket disabled');setConnectionError('Real-time connection unavailable. The system will use polling mode for updates.');toast.error('Real-time connection unavailable - using polling mode');}};wsRef.current.onerror=error=>{clearTimeout(connectionTimeout);console.error('WebSocket error:',error);setIsConnecting(false);setConnectionError('WebSocket connection error. Real-time updates are disabled.');};}catch(error){console.error('Error creating WebSocket connection:',error);setIsConnecting(false);setConnectionError('Failed to create WebSocket connection. Real-time updates are disabled.');if(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);}const delay=reconnectDelay*Math.pow(2,connectionAttempts);reconnectTimeoutRef.current=setTimeout(()=>{setConnectionAttempts(prev=>prev+1);connect();},delay);}},[isConnecting,isConnected,connectionAttempts,maxReconnectAttempts,reconnectDelay,authToken]);const sendMessage=useCallback(message=>{if(wsRef.current&&wsRef.current.readyState===WebSocket.OPEN){wsRef.current.send(JSON.stringify(message));}else{console.warn('WebSocket is not connected, cannot send message');toast.error('Real-time connection is not available');}},[]);const disconnect=useCallback(()=>{if(wsRef.current){wsRef.current.close(1000,'User initiated disconnect');}},[]);const updateAuthToken=useCallback(token=>{setAuthToken(token);if(token){localStorage.setItem('watchtower_auth_token',token);}else{localStorage.removeItem('watchtower_auth_token');}// Reconnect with new token\nif(isConnected){disconnect();setTimeout(()=>{setConnectionAttempts(0);connect();},1000);}},[isConnected,disconnect,connect]);useEffect(()=>{if(!isInitializedRef.current){isInitializedRef.current=true;connect();}return()=>{disconnect();if(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);}if(heartbeatIntervalRef.current){clearInterval(heartbeatIntervalRef.current);}};},[connect,disconnect]);const value={isConnected,isConnecting,connectionAttempts,connectionError,metrics,events,agents,authToken,sendMessage,connect,disconnect,updateAuthToken};return/*#__PURE__*/_jsx(WebSocketContext.Provider,{value:value,children:children});}export function useWebSocket(){const context=useContext(WebSocketContext);if(context===undefined){throw new Error('useWebSocket must be used within a WebSocketProvider');}return context;}","map":{"version":3,"names":["React","createContext","useContext","useEffect","useRef","useState","useCallback","toast","jsx","_jsx","WebSocketContext","WebSocketProvider","_ref","children","isConnected","setIsConnected","isConnecting","setIsConnecting","connectionAttempts","setConnectionAttempts","metrics","setMetrics","events","setEvents","agents","setAgents","connectionError","setConnectionError","authToken","setAuthToken","wsRef","reconnectTimeoutRef","heartbeatIntervalRef","maxReconnectAttempts","reconnectDelay","isInitializedRef","token","localStorage","getItem","connect","console","log","error","wsUrl","concat","encodeURIComponent","current","WebSocket","connectionTimeout","setTimeout","readyState","CONNECTING","close","onopen","clearTimeout","send","JSON","stringify","action","channels","clearInterval","setInterval","OPEN","success","onmessage","event","data","parse","type","prev","slice","severity","message","duration","warning","onclose","code","reason","removeItem","delay","Math","pow","onerror","sendMessage","warn","disconnect","updateAuthToken","setItem","value","Provider","useWebSocket","context","undefined","Error"],"sources":["/Users/alex/watchtower/dashboard/frontend/src/hooks/useWebSocket.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useRef, useState, useCallback } from 'react';\nimport toast from 'react-hot-toast';\n\nconst WebSocketContext = createContext();\n\nexport function WebSocketProvider({ children }) {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [connectionAttempts, setConnectionAttempts] = useState(0);\n  const [metrics, setMetrics] = useState(null);\n  const [events, setEvents] = useState([]);\n  const [agents, setAgents] = useState([]);\n  const [connectionError, setConnectionError] = useState(null);\n  const [authToken, setAuthToken] = useState(null);\n  const wsRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const heartbeatIntervalRef = useRef(null);\n  const maxReconnectAttempts = 5;\n  const reconnectDelay = 3000;\n  const isInitializedRef = useRef(false);\n\n  // Get auth token from localStorage\n  useEffect(() => {\n    const token = localStorage.getItem('watchtower_auth_token');\n    if (token) {\n      setAuthToken(token);\n    }\n  }, []);\n\n  const connect = useCallback(() => {\n    if (isConnecting || isConnected) return;\n    \n    if (connectionAttempts >= maxReconnectAttempts) {\n      console.log('Max reconnection attempts reached, stopping WebSocket connection');\n      setConnectionError('Maximum reconnection attempts reached. Real-time updates are disabled.');\n      toast.error('Real-time connection unavailable - using polling mode');\n      return;\n    }\n    \n    setIsConnecting(true);\n    setConnectionError(null);\n    \n    try {\n      // Build WebSocket URL with authentication token\n      let wsUrl = 'ws://10.42.69.208:5000/ws';\n      if (authToken) {\n        wsUrl += `?token=${encodeURIComponent(authToken)}`;\n      }\n      \n      console.log('Attempting WebSocket connection to:', wsUrl);\n      wsRef.current = new WebSocket(wsUrl);\n      \n      const connectionTimeout = setTimeout(() => {\n        if (wsRef.current && wsRef.current.readyState === WebSocket.CONNECTING) {\n          console.log('WebSocket connection timeout');\n          wsRef.current.close();\n          setConnectionError('Connection timeout. Real-time updates are disabled.');\n        }\n      }, 10000);\n      \n      wsRef.current.onopen = () => {\n        clearTimeout(connectionTimeout);\n        setIsConnected(true);\n        setIsConnecting(false);\n        setConnectionAttempts(0);\n        setConnectionError(null);\n        console.log('WebSocket connected successfully');\n        \n        // Subscribe to channels\n        wsRef.current.send(JSON.stringify({\n          action: 'subscribe',\n          channels: ['metrics', 'events', 'agents', 'alerts', 'system']\n        }));\n        \n        // Set up heartbeat\n        if (heartbeatIntervalRef.current) {\n          clearInterval(heartbeatIntervalRef.current);\n        }\n        \n        heartbeatIntervalRef.current = setInterval(() => {\n          if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n            wsRef.current.send(JSON.stringify({ action: 'ping' }));\n          }\n        }, 30000);\n        \n        toast.success('Real-time connection established');\n      };\n      \n      wsRef.current.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          console.log('WebSocket message received:', data);\n          \n          switch (data.type) {\n            case 'metrics_update':\n              setMetrics(data.data);\n              break;\n            case 'new_event':\n              setEvents(prev => [data.data, ...prev.slice(0, 99)]);\n              if (data.data.severity === 'critical' || data.data.severity === 'error') {\n                toast.error(`Critical Event: ${data.data.message}`, { duration: 6000 });\n              } else if (data.data.severity === 'warning') {\n                toast.warning(`Warning: ${data.data.message}`, { duration: 4000 });\n              } else {\n                toast.success(`Event: ${data.data.message}`, { duration: 3000 });\n              }\n              break;\n            case 'alert':\n              toast.error(`Alert: ${data.data.message}`, { duration: 6000 });\n              break;\n            case 'events':\n              setEvents(data.data);\n              break;\n            case 'agents':\n              setAgents(data.data);\n              break;\n            case 'subscription_confirmed':\n              console.log('Subscribed to channels:', data.channels);\n              break;\n            case 'pong':\n              console.log('Received pong from server');\n              break;\n            case 'ping':\n              // Respond to server ping\n              if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n                wsRef.current.send(JSON.stringify({ action: 'pong' }));\n              }\n              break;\n            case 'error':\n              console.error('WebSocket error from server:', data.message);\n              toast.error(`Server Error: ${data.message}`, { duration: 4000 });\n              break;\n            default:\n              console.log('Unknown message type:', data.type);\n          }\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n      \n      wsRef.current.onclose = (event) => {\n        clearTimeout(connectionTimeout);\n        setIsConnected(false);\n        setIsConnecting(false);\n        if (heartbeatIntervalRef.current) {\n          clearInterval(heartbeatIntervalRef.current);\n          heartbeatIntervalRef.current = null;\n        }\n        console.log('WebSocket disconnected:', event.code, event.reason);\n        \n        // Handle authentication errors\n        if (event.code === 4001) {\n          console.log('Authentication failed, clearing token');\n          localStorage.removeItem('watchtower_auth_token');\n          setAuthToken(null);\n          setConnectionError('Authentication failed. Please log in again.');\n          toast.error('Authentication failed - please log in again');\n          return;\n        }\n        \n        if (event.code !== 1000 && connectionAttempts < maxReconnectAttempts) {\n          if (reconnectTimeoutRef.current) {\n            clearTimeout(reconnectTimeoutRef.current);\n          }\n          \n          const delay = reconnectDelay * Math.pow(2, connectionAttempts);\n          console.log(`Scheduling reconnection attempt ${connectionAttempts + 1} in ${delay}ms`);\n          reconnectTimeoutRef.current = setTimeout(() => {\n            setConnectionAttempts(prev => prev + 1);\n            connect();\n          }, delay);\n        } else if (connectionAttempts >= maxReconnectAttempts) {\n          console.log('Max reconnection attempts reached, WebSocket disabled');\n          setConnectionError('Real-time connection unavailable. The system will use polling mode for updates.');\n          toast.error('Real-time connection unavailable - using polling mode');\n        }\n      };\n      \n      wsRef.current.onerror = (error) => {\n        clearTimeout(connectionTimeout);\n        console.error('WebSocket error:', error);\n        setIsConnecting(false);\n        setConnectionError('WebSocket connection error. Real-time updates are disabled.');\n      };\n      \n    } catch (error) {\n      console.error('Error creating WebSocket connection:', error);\n      setIsConnecting(false);\n      setConnectionError('Failed to create WebSocket connection. Real-time updates are disabled.');\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      \n      const delay = reconnectDelay * Math.pow(2, connectionAttempts);\n      reconnectTimeoutRef.current = setTimeout(() => {\n        setConnectionAttempts(prev => prev + 1);\n        connect();\n      }, delay);\n    }\n  }, [isConnecting, isConnected, connectionAttempts, maxReconnectAttempts, reconnectDelay, authToken]);\n\n  const sendMessage = useCallback((message) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not connected, cannot send message');\n      toast.error('Real-time connection is not available');\n    }\n  }, []);\n\n  const disconnect = useCallback(() => {\n    if (wsRef.current) {\n      wsRef.current.close(1000, 'User initiated disconnect');\n    }\n  }, []);\n\n  const updateAuthToken = useCallback((token) => {\n    setAuthToken(token);\n    if (token) {\n      localStorage.setItem('watchtower_auth_token', token);\n    } else {\n      localStorage.removeItem('watchtower_auth_token');\n    }\n    \n    // Reconnect with new token\n    if (isConnected) {\n      disconnect();\n      setTimeout(() => {\n        setConnectionAttempts(0);\n        connect();\n      }, 1000);\n    }\n  }, [isConnected, disconnect, connect]);\n\n  useEffect(() => {\n    if (!isInitializedRef.current) {\n      isInitializedRef.current = true;\n      connect();\n    }\n    \n    return () => {\n      disconnect();\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (heartbeatIntervalRef.current) {\n        clearInterval(heartbeatIntervalRef.current);\n      }\n    };\n  }, [connect, disconnect]);\n\n  const value = {\n    isConnected,\n    isConnecting,\n    connectionAttempts,\n    connectionError,\n    metrics,\n    events,\n    agents,\n    authToken,\n    sendMessage,\n    connect,\n    disconnect,\n    updateAuthToken\n  };\n\n  return (\n    <WebSocketContext.Provider value={value}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n}\n\nexport function useWebSocket() {\n  const context = useContext(WebSocketContext);\n  if (context === undefined) {\n    throw new Error('useWebSocket must be used within a WebSocketProvider');\n  }\n  return context;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}