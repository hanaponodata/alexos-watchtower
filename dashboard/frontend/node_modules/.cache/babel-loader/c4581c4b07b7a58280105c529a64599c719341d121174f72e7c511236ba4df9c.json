{"ast":null,"code":"import React,{createContext,useContext,useEffect,useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const ThemeContext=/*#__PURE__*/createContext();export function ThemeProvider(_ref){let{children}=_ref;const[darkMode,setDarkMode]=useState(()=>{const saved=localStorage.getItem('darkMode');return saved?JSON.parse(saved):window.matchMedia('(prefers-color-scheme: dark)').matches;});useEffect(()=>{localStorage.setItem('darkMode',JSON.stringify(darkMode));if(darkMode){document.documentElement.classList.add('dark');}else{document.documentElement.classList.remove('dark');}},[darkMode]);const toggleDarkMode=()=>{setDarkMode(!darkMode);};return/*#__PURE__*/_jsx(ThemeContext.Provider,{value:{darkMode,toggleDarkMode},children:children});}export function useTheme(){const context=useContext(ThemeContext);if(context===undefined){throw new Error('useTheme must be used within a ThemeProvider');}return context;}","map":{"version":3,"names":["React","createContext","useContext","useEffect","useState","jsx","_jsx","ThemeContext","ThemeProvider","_ref","children","darkMode","setDarkMode","saved","localStorage","getItem","JSON","parse","window","matchMedia","matches","setItem","stringify","document","documentElement","classList","add","remove","toggleDarkMode","Provider","value","useTheme","context","undefined","Error"],"sources":["/Users/alex/watchtower/dashboard/frontend/src/hooks/useTheme.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState } from 'react';\n\nconst ThemeContext = createContext();\n\nexport function ThemeProvider({ children }) {\n  const [darkMode, setDarkMode] = useState(() => {\n    const saved = localStorage.getItem('darkMode');\n    return saved ? JSON.parse(saved) : window.matchMedia('(prefers-color-scheme: dark)').matches;\n  });\n\n  useEffect(() => {\n    localStorage.setItem('darkMode', JSON.stringify(darkMode));\n    \n    if (darkMode) {\n      document.documentElement.classList.add('dark');\n    } else {\n      document.documentElement.classList.remove('dark');\n    }\n  }, [darkMode]);\n\n  const toggleDarkMode = () => {\n    setDarkMode(!darkMode);\n  };\n\n  return (\n    <ThemeContext.Provider value={{ darkMode, toggleDarkMode }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n} "],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE9E,KAAM,CAAAC,YAAY,cAAGN,aAAa,CAAC,CAAC,CAEpC,MAAO,SAAS,CAAAO,aAAaA,CAAAC,IAAA,CAAe,IAAd,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACxC,KAAM,CAACE,QAAQ,CAAEC,WAAW,CAAC,CAAGR,QAAQ,CAAC,IAAM,CAC7C,KAAM,CAAAS,KAAK,CAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC,CAC9C,MAAO,CAAAF,KAAK,CAAGG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,CAAGK,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO,CAC9F,CAAC,CAAC,CAEFjB,SAAS,CAAC,IAAM,CACdW,YAAY,CAACO,OAAO,CAAC,UAAU,CAAEL,IAAI,CAACM,SAAS,CAACX,QAAQ,CAAC,CAAC,CAE1D,GAAIA,QAAQ,CAAE,CACZY,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC,CAChD,CAAC,IAAM,CACLH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC,CACnD,CACF,CAAC,CAAE,CAAChB,QAAQ,CAAC,CAAC,CAEd,KAAM,CAAAiB,cAAc,CAAGA,CAAA,GAAM,CAC3BhB,WAAW,CAAC,CAACD,QAAQ,CAAC,CACxB,CAAC,CAED,mBACEL,IAAA,CAACC,YAAY,CAACsB,QAAQ,EAACC,KAAK,CAAE,CAAEnB,QAAQ,CAAEiB,cAAe,CAAE,CAAAlB,QAAA,CACxDA,QAAQ,CACY,CAAC,CAE5B,CAEA,MAAO,SAAS,CAAAqB,QAAQA,CAAA,CAAG,CACzB,KAAM,CAAAC,OAAO,CAAG9B,UAAU,CAACK,YAAY,CAAC,CACxC,GAAIyB,OAAO,GAAKC,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAC,KAAK,CAAC,8CAA8C,CAAC,CACjE,CACA,MAAO,CAAAF,OAAO,CAChB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}