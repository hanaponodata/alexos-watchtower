{"ast":null,"code":"import React,{createContext,useContext,useEffect,useRef,useState,useCallback}from'react';import toast from'react-hot-toast';import{jsx as _jsx}from\"react/jsx-runtime\";const WebSocketContext=/*#__PURE__*/createContext();export function WebSocketProvider(_ref){let{children}=_ref;const[isConnected,setIsConnected]=useState(false);const[isConnecting,setIsConnecting]=useState(false);const[connectionAttempts,setConnectionAttempts]=useState(0);const[metrics,setMetrics]=useState(null);const[events,setEvents]=useState([]);const[agents,setAgents]=useState([]);const[connectionError,setConnectionError]=useState(null);const wsRef=useRef(null);const reconnectTimeoutRef=useRef(null);const heartbeatIntervalRef=useRef(null);const maxReconnectAttempts=3;const reconnectDelay=5000;const isInitializedRef=useRef(false);const connect=useCallback(()=>{if(isConnecting||isConnected)return;if(connectionAttempts>=maxReconnectAttempts){console.log('Max reconnection attempts reached, stopping WebSocket connection');setConnectionError('Maximum reconnection attempts reached. Real-time updates are disabled.');toast.error('Real-time connection unavailable - using polling mode');return;}setIsConnecting(true);setConnectionError(null);try{const protocol=window.location.protocol==='https:'?'wss:':'ws:';const wsUrl=\"\".concat(protocol,\"//\").concat(window.location.host,\"/dashboard/ws\");console.log('Attempting WebSocket connection to:',wsUrl);wsRef.current=new WebSocket(wsUrl);const connectionTimeout=setTimeout(()=>{if(wsRef.current&&wsRef.current.readyState===WebSocket.CONNECTING){console.log('WebSocket connection timeout');wsRef.current.close();setConnectionError('Connection timeout. Real-time updates are disabled.');}},10000);wsRef.current.onopen=()=>{clearTimeout(connectionTimeout);setIsConnected(true);setIsConnecting(false);setConnectionAttempts(0);setConnectionError(null);console.log('WebSocket connected successfully');wsRef.current.send(JSON.stringify({action:'subscribe',channels:['metrics','events','agents']}));if(heartbeatIntervalRef.current){clearInterval(heartbeatIntervalRef.current);}heartbeatIntervalRef.current=setInterval(()=>{if(wsRef.current&&wsRef.current.readyState===WebSocket.OPEN){wsRef.current.send(JSON.stringify({action:'ping'}));}},30000);toast.success('Real-time connection established');};wsRef.current.onmessage=event=>{try{const data=JSON.parse(event.data);switch(data.type){case'metrics_update':setMetrics(data.data);break;case'new_event':setEvents(prev=>[data.data,...prev.slice(0,99)]);if(data.data.severity==='critical'||data.data.severity==='error'){toast.error(\"Critical Event: \".concat(data.data.message),{duration:6000});}else if(data.data.severity==='warning'){toast.warning(\"Warning: \".concat(data.data.message),{duration:4000});}else{toast.success(\"Event: \".concat(data.data.message),{duration:3000});}break;case'alert':toast.error(\"Alert: \".concat(data.data.message),{duration:6000});break;case'events':setEvents(data.data);break;case'agents':setAgents(data.data);break;case'subscription_confirmed':console.log('Subscribed to channels:',data.channels);break;case'pong':break;default:console.log('Unknown message type:',data.type);}}catch(error){console.error('Error parsing WebSocket message:',error);}};wsRef.current.onclose=event=>{clearTimeout(connectionTimeout);setIsConnected(false);setIsConnecting(false);if(heartbeatIntervalRef.current){clearInterval(heartbeatIntervalRef.current);heartbeatIntervalRef.current=null;}console.log('WebSocket disconnected:',event.code,event.reason);if(event.code!==1000&&connectionAttempts<maxReconnectAttempts){if(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);}const delay=reconnectDelay*Math.pow(2,connectionAttempts);console.log(\"Scheduling reconnection attempt \".concat(connectionAttempts+1,\" in \").concat(delay,\"ms\"));reconnectTimeoutRef.current=setTimeout(()=>{setConnectionAttempts(prev=>prev+1);connect();},delay);}else if(connectionAttempts>=maxReconnectAttempts){console.log('Max reconnection attempts reached, WebSocket disabled');setConnectionError('Real-time connection unavailable. The system will use polling mode for updates.');toast.error('Real-time connection unavailable - using polling mode');}};wsRef.current.onerror=error=>{clearTimeout(connectionTimeout);console.error('WebSocket error:',error);setIsConnecting(false);setConnectionError('WebSocket connection error. Real-time updates are disabled.');};}catch(error){console.error('Error creating WebSocket connection:',error);setIsConnecting(false);setConnectionError('Failed to create WebSocket connection. Real-time updates are disabled.');if(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);}const delay=reconnectDelay*Math.pow(2,connectionAttempts);reconnectTimeoutRef.current=setTimeout(()=>{setConnectionAttempts(prev=>prev+1);connect();},delay);}},[isConnecting,isConnected,connectionAttempts,maxReconnectAttempts,reconnectDelay]);const sendMessage=useCallback(message=>{if(wsRef.current&&wsRef.current.readyState===WebSocket.OPEN){wsRef.current.send(JSON.stringify(message));}else{console.warn('WebSocket is not connected, cannot send message');toast.error('Real-time connection is not available');}},[]);const disconnect=useCallback(()=>{if(wsRef.current){wsRef.current.close(1000,'User initiated disconnect');}},[]);useEffect(()=>{if(!isInitializedRef.current){isInitializedRef.current=true;connect();}return()=>{disconnect();if(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);}if(heartbeatIntervalRef.current){clearInterval(heartbeatIntervalRef.current);}};},[connect,disconnect]);const value={isConnected,isConnecting,connectionAttempts,connectionError,metrics,events,agents,sendMessage,connect,disconnect};return/*#__PURE__*/_jsx(WebSocketContext.Provider,{value:value,children:children});}export function useWebSocket(){const context=useContext(WebSocketContext);if(context===undefined){throw new Error('useWebSocket must be used within a WebSocketProvider');}return context;}","map":{"version":3,"names":["React","createContext","useContext","useEffect","useRef","useState","useCallback","toast","jsx","_jsx","WebSocketContext","WebSocketProvider","_ref","children","isConnected","setIsConnected","isConnecting","setIsConnecting","connectionAttempts","setConnectionAttempts","metrics","setMetrics","events","setEvents","agents","setAgents","connectionError","setConnectionError","wsRef","reconnectTimeoutRef","heartbeatIntervalRef","maxReconnectAttempts","reconnectDelay","isInitializedRef","connect","console","log","error","protocol","window","location","wsUrl","concat","host","current","WebSocket","connectionTimeout","setTimeout","readyState","CONNECTING","close","onopen","clearTimeout","send","JSON","stringify","action","channels","clearInterval","setInterval","OPEN","success","onmessage","event","data","parse","type","prev","slice","severity","message","duration","warning","onclose","code","reason","delay","Math","pow","onerror","sendMessage","warn","disconnect","value","Provider","useWebSocket","context","undefined","Error"],"sources":["/Users/alex/watchtower/dashboard/frontend/src/hooks/useWebSocket.js"],"sourcesContent":["import React, { createContext, useContext, useEffect, useRef, useState, useCallback } from 'react';\nimport toast from 'react-hot-toast';\n\nconst WebSocketContext = createContext();\n\nexport function WebSocketProvider({ children }) {\n  const [isConnected, setIsConnected] = useState(false);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [connectionAttempts, setConnectionAttempts] = useState(0);\n  const [metrics, setMetrics] = useState(null);\n  const [events, setEvents] = useState([]);\n  const [agents, setAgents] = useState([]);\n  const [connectionError, setConnectionError] = useState(null);\n  const wsRef = useRef(null);\n  const reconnectTimeoutRef = useRef(null);\n  const heartbeatIntervalRef = useRef(null);\n  const maxReconnectAttempts = 3;\n  const reconnectDelay = 5000;\n  const isInitializedRef = useRef(false);\n\n  const connect = useCallback(() => {\n    if (isConnecting || isConnected) return;\n    \n    if (connectionAttempts >= maxReconnectAttempts) {\n      console.log('Max reconnection attempts reached, stopping WebSocket connection');\n      setConnectionError('Maximum reconnection attempts reached. Real-time updates are disabled.');\n      toast.error('Real-time connection unavailable - using polling mode');\n      return;\n    }\n    \n    setIsConnecting(true);\n    setConnectionError(null);\n    \n    try {\n      const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';\n      const wsUrl = `${protocol}//${window.location.host}/dashboard/ws`;\n      \n      console.log('Attempting WebSocket connection to:', wsUrl);\n      wsRef.current = new WebSocket(wsUrl);\n      \n      const connectionTimeout = setTimeout(() => {\n        if (wsRef.current && wsRef.current.readyState === WebSocket.CONNECTING) {\n          console.log('WebSocket connection timeout');\n          wsRef.current.close();\n          setConnectionError('Connection timeout. Real-time updates are disabled.');\n        }\n      }, 10000);\n      \n      wsRef.current.onopen = () => {\n        clearTimeout(connectionTimeout);\n        setIsConnected(true);\n        setIsConnecting(false);\n        setConnectionAttempts(0);\n        setConnectionError(null);\n        console.log('WebSocket connected successfully');\n        \n        wsRef.current.send(JSON.stringify({\n          action: 'subscribe',\n          channels: ['metrics', 'events', 'agents']\n        }));\n        \n        if (heartbeatIntervalRef.current) {\n          clearInterval(heartbeatIntervalRef.current);\n        }\n        \n        heartbeatIntervalRef.current = setInterval(() => {\n          if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n            wsRef.current.send(JSON.stringify({ action: 'ping' }));\n          }\n        }, 30000);\n        \n        toast.success('Real-time connection established');\n      };\n      \n      wsRef.current.onmessage = (event) => {\n        try {\n          const data = JSON.parse(event.data);\n          switch (data.type) {\n            case 'metrics_update':\n              setMetrics(data.data);\n              break;\n            case 'new_event':\n              setEvents(prev => [data.data, ...prev.slice(0, 99)]);\n              if (data.data.severity === 'critical' || data.data.severity === 'error') {\n                toast.error(`Critical Event: ${data.data.message}`, { duration: 6000 });\n              } else if (data.data.severity === 'warning') {\n                toast.warning(`Warning: ${data.data.message}`, { duration: 4000 });\n              } else {\n                toast.success(`Event: ${data.data.message}`, { duration: 3000 });\n              }\n              break;\n            case 'alert':\n              toast.error(`Alert: ${data.data.message}`, { duration: 6000 });\n              break;\n            case 'events':\n              setEvents(data.data);\n              break;\n            case 'agents':\n              setAgents(data.data);\n              break;\n            case 'subscription_confirmed':\n              console.log('Subscribed to channels:', data.channels);\n              break;\n            case 'pong':\n              break;\n            default:\n              console.log('Unknown message type:', data.type);\n          }\n        } catch (error) {\n          console.error('Error parsing WebSocket message:', error);\n        }\n      };\n      \n      wsRef.current.onclose = (event) => {\n        clearTimeout(connectionTimeout);\n        setIsConnected(false);\n        setIsConnecting(false);\n        if (heartbeatIntervalRef.current) {\n          clearInterval(heartbeatIntervalRef.current);\n          heartbeatIntervalRef.current = null;\n        }\n        console.log('WebSocket disconnected:', event.code, event.reason);\n        \n        if (event.code !== 1000 && connectionAttempts < maxReconnectAttempts) {\n          if (reconnectTimeoutRef.current) {\n            clearTimeout(reconnectTimeoutRef.current);\n          }\n          \n          const delay = reconnectDelay * Math.pow(2, connectionAttempts);\n          console.log(`Scheduling reconnection attempt ${connectionAttempts + 1} in ${delay}ms`);\n          reconnectTimeoutRef.current = setTimeout(() => {\n            setConnectionAttempts(prev => prev + 1);\n            connect();\n          }, delay);\n        } else if (connectionAttempts >= maxReconnectAttempts) {\n          console.log('Max reconnection attempts reached, WebSocket disabled');\n          setConnectionError('Real-time connection unavailable. The system will use polling mode for updates.');\n          toast.error('Real-time connection unavailable - using polling mode');\n        }\n      };\n      \n      wsRef.current.onerror = (error) => {\n        clearTimeout(connectionTimeout);\n        console.error('WebSocket error:', error);\n        setIsConnecting(false);\n        setConnectionError('WebSocket connection error. Real-time updates are disabled.');\n      };\n      \n    } catch (error) {\n      console.error('Error creating WebSocket connection:', error);\n      setIsConnecting(false);\n      setConnectionError('Failed to create WebSocket connection. Real-time updates are disabled.');\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      \n      const delay = reconnectDelay * Math.pow(2, connectionAttempts);\n      reconnectTimeoutRef.current = setTimeout(() => {\n        setConnectionAttempts(prev => prev + 1);\n        connect();\n      }, delay);\n    }\n  }, [isConnecting, isConnected, connectionAttempts, maxReconnectAttempts, reconnectDelay]);\n\n  const sendMessage = useCallback((message) => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket is not connected, cannot send message');\n      toast.error('Real-time connection is not available');\n    }\n  }, []);\n\n  const disconnect = useCallback(() => {\n    if (wsRef.current) {\n      wsRef.current.close(1000, 'User initiated disconnect');\n    }\n  }, []);\n\n  useEffect(() => {\n    if (!isInitializedRef.current) {\n      isInitializedRef.current = true;\n      connect();\n    }\n    \n    return () => {\n      disconnect();\n      if (reconnectTimeoutRef.current) {\n        clearTimeout(reconnectTimeoutRef.current);\n      }\n      if (heartbeatIntervalRef.current) {\n        clearInterval(heartbeatIntervalRef.current);\n      }\n    };\n  }, [connect, disconnect]);\n\n  const value = {\n    isConnected,\n    isConnecting,\n    connectionAttempts,\n    connectionError,\n    metrics,\n    events,\n    agents,\n    sendMessage,\n    connect,\n    disconnect\n  };\n\n  return (\n    <WebSocketContext.Provider value={value}>\n      {children}\n    </WebSocketContext.Provider>\n  );\n}\n\nexport function useWebSocket() {\n  const context = useContext(WebSocketContext);\n  if (context === undefined) {\n    throw new Error('useWebSocket must be used within a WebSocketProvider');\n  }\n  return context;\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}